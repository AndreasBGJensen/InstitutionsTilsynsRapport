{"version":3,"sources":["comtainer/Costumer/LogIn.js","comtainer/Costumer/Register.js","comtainer/Costumer/SearchInstitution.js","stores/TokenStore.js","stores/InstitutionsStore.js","comtainer/Costumer/InstitutionView.js","comtainer/LandingPage.js","comtainer/Utility/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["LogIn","href","React","Component","Register","state","user","name","email","username","userError","brugere","onInputChange","event","field","target","value","setState","console","log","onSubmit","evt","fieldError","validate","preventDefault","Object","keys","length","concat","errors","this","placeholder","onChange","style","color","type","SearchInstitution","props","adresses","fiels","searchError","fields","adress","zipcode","to","pathname","Loginstates","LOGGING_IN","LOGGEDOUT","LOGGED_IN","TokenStore","token","logindata","password","localStorage","getItem","fetch","method","body","JSON","stringify","headers","then","response","text","setItem","catch","decorate","observable","states","LOADING","DONE","FAILED","InstitutionsStore","vuggestuer","fetchItem","Authorization","json","test","error","institution","List","list","map","item","key","ListItem","navn","indstsers","tilsynsPath","indsats","j","link","venteliste","InstitutionView","loading","location","LandingPage","Button","NavBar","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","id","Nav","className","Link","App","Container","exact","path","component","institutionView","observer","Boolean","window","hostname","match","url","results","RegExp","exec","decodeURIComponent","replace","getParameterByName","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.324d8bbf.chunk.js","sourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nconst baseUrl = process.env.NODE_ENV === 'development' ?  \"http://localhost:8080/\":\"\"; //Check if dev\n\n\n\n\nexport class LogIn extends React.Component{\n\n    /*constructor() {\n        super();\n        //Loading data when it when the store is initialized.\n        this.fetchItem();\n    }\n\n    fetchItem(){\n        fetch(baseUrl + \"rest/campusnet/login\")\n            .then(()=> {\n                //console.log(response)\n            })\n            .catch((error)=>{\n                console.log(error)\n\n            });\n    }*/\n\n    render() {\n\n        return <a href={baseUrl+\"rest/campusnet/login\"}>login med campusnet</a>\n    }\n\n    /*\n    constructor(props) {\n        super(props);\n        this.state = {\n            username:'',\n            password:''};\n    }\n\n    handleUsernameChange = (event) => {\n        this.setState({username:event.target.value});\n        console.log('Handle change' +this.state.username);\n    };\n\n    handlePasswordChange = (event) => {\n        this.setState({password:event.target.value});\n        console.log('Handle change' +this.state.password);\n    };\n\n\n    onSubmit=(evt)=>{\n        const name =this.state.username;\n        const password = this.state.password;\n        this.setState({username:name})\n        this.setState({password:password})\n        tokenStore.logindata.username=this.state.username;\n        tokenStore.logindata.password=this.state.password;\n        tokenStore.doLogin();\n        evt.preventDefault();\n    }\n\n\n\n    render() {\n\n        return (\n\n          <div>\n              <h1>Login</h1>\n                <form onSubmit={this.onSubmit}>\n                    <input\n                        placeholder=\"Username\"\n                        value={this.state.username}\n                        onChange={this.handleUsernameChange}\n                    />\n                    <input\n                        placeholder=\"password\"\n                        value={this.state.password}\n                        onChange={this.handlePasswordChange}\n                    />\n                    <input type=\"submit\"/>\n                </form>\n\n          </div>\n\n        );\n    }*/\n}\n\nexport default LogIn","import React from 'react'\n\n\nclass Register extends React.Component {\n\n    state = {\n        user: {\n            name: '',\n            email: '',\n            username: ''\n        },\n        userError: {},\n        brugere:[],\n    };\n\n\n\n    onInputChange = (event) => {\n\n        const field = this.state.user;\n        field[event.target.name] = event.target.value;\n        this.setState({user: field});\n        console.log('Handle change' +event.target.name);\n    };\n\n\n    onSubmit=(evt)=>{\n        const brugere = [...this.state.brugere];\n       const field = this.state.user;\n       const fieldError = this.validate(field);\n       this.setState({userError:fieldError});\n        evt.preventDefault();\n\n        if(Object.keys(fieldError).length) return;\n\n\n       this.setState({\n           brugere:brugere.concat(field),\n           user :{\n               name:field.name,\n               email:field.email,\n               username:field.username\n           }\n       });\n\n\n        console.log(this.state.user)\n\n    };\n\n    validate=(user)=>{\n        const errors={};\n        if(!user.name) errors.name = \"Username required\";\n        if(!user.email) errors.email =\"Email required\";\n        if(!user.username) errors.username =\"Username required\";\n        return errors;\n\n    };\n\n\n\n\n\n    render(){\n        return(\n\n            <div>\n                <form onSubmit={this.onSubmit}>\n                    <input\n                        name=\"username\"\n                        placeholder=\"username\"\n                        value={this.state.user.username}\n                        onChange={this.onInputChange}\n                    />\n\n                    <span style={{color:'red'}}>{this.state.userError.username}</span>\n                    <br/>\n\n                    <input\n                        name=\"email\"\n                        placeholder=\"email\"\n                        type='email'\n                        value={this.state.user.email}\n                        onChange={this.onInputChange}\n                    />\n\n                    <span style={{color:'red'}}>{this.state.userError.email}</span>\n                    <br/>\n\n                    <input\n                        placeholder=\"name\"\n                        name=\"name\"\n                        type='text'\n                        value={this.state.user.name}\n                        onChange={this.onInputChange}\n                    />\n                    <span style={{color:'red'}}>{this.state.userError.name}</span>\n                    <br/>\n                    <input type=\"submit\"/>\n                </form>\n\n            </div>\n\n        )\n    }\n}\n\nexport default Register\n","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport {Link} from \"react-router-dom\"\n\nclass SearchInstitution extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fiels : {\n                adress:'',\n                zipcode:''},\n\n            searchError: {},\n            adresses:[],\n        };\n    }\n\n    onSubmit=(evt)=>{\n\n        const adresses = [...this.state.adresses];\n        const field = this.state.fiels\n        const fieldError = this.validate(field);\n        this.setState({searchError:fieldError});\n        evt.preventDefault();\n\n        if(Object.keys(fieldError).length) return;\n\n//Here I set the state for the input.\n        this.setState({\n            fields:adresses.concat(field),\n            fiels :{\n                adress:field.adress,\n                zipcode:field.zipcode,\n\n            }\n        });\n  console.log(this.state.fiels)\n\n\n\n\n\n    }\n//Validates if there is an input\n    validate=(fiels)=>{\n        const errors={};\n        if(!fiels.adress) errors.adress = \"Adress required\";\n        if(!fiels.zipcode) errors.zipcode =\"Zipcode required\";\n\n        return errors;\n\n    };\n\n    //This function updates every time a key have been stroke\n    onInputChange = (event) => {\n\n        const field = this.state.fiels;\n        field[event.target.name] = event.target.value;\n        this.setState({user: field});\n        console.log('Handle change' +event.target.name);\n        console.log('Handle change' +this.state.fiels.adress);\n        console.log('Handle change' +this.state.fiels.zipcode);\n    };\n\n\n\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.onSubmit}>\n                    <input\n                        name=\"adress\"\n                        placeholder=\"Adresse\"\n                        value={this.state.adress}\n                        onChange={this.onInputChange}\n                    />\n                    <span style={{color:'red'}}>{this.state.searchError.adress}</span>\n                    <br/>\n                    <input\n                        name=\"zipcode\"\n                        placeholder=\"post nr\"\n                        value={this.state.zipcode}\n                        onChange={this.onInputChange}\n                    />\n                    <span style={{color:'red'}}>{this.state.searchError.zipcode}</span>\n                    <br/>\n\n\n                    <Link to ={{//Linking to search results\n                        pathname: \"/searchResults\",\n                        state:{\n                            name: \"Hello\"\n                        }\n                    }} >\n                        <input type=\"submit\"/>\n                    </Link>\n                </form>\n            </div>\n            )\n        }\n    }\n\n\nexport default SearchInstitution","import {decorate, observable} from \"mobx\";\nconst baseUrl = process.env.NODE_ENV === 'development' ?  \"http://localhost:8080/\":\"\"; //Check if dev\n\n\n\nconst Loginstates = {LOGGING_IN:\"Loading\", LOGGEDOUT:\"Logout\", LOGGED_IN:\"LoggedIn\"};\n\nexport class TokenStore {\n    state = Loginstates.LOGGEDOUT;\n    token = null;\n    logindata = {username:\"\",password:\"\"};\n\n    constructor() {\n        this.token = localStorage.getItem(\"girafToken\")\n        //Validate if token is still good and keep/discard token and set state\n    }\n\n    doLogin() {\n        this.state=Loginstates.LOGGING_IN;\n        fetch(baseUrl + \"rest/login\",{\n            method:\"POST\",\n            body:JSON.stringify(this.logindata),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(\n            (response)=> {\n                response.text().then(\n                    (token)=> {\n                        console.log(\"Got Token: \" + token);\n                        this.token=token;\n                        localStorage.setItem(\"girafToken\",token);\n                        this.state=Loginstates.LOGGED_IN;}\n\n                )}\n        ).catch(()=>this.state = Loginstates.LOGGEDOUT )\n    }\n}\n\n\ndecorate(TokenStore,{\n    state: observable,\n    token: observable,\n    logindata:observable\n\n});\n\nexport const tokenStore = new TokenStore();","\nimport {decorate, observable} from \"mobx\";\nimport {TokenStore} from \"./TokenStore\";\nconst baseUrl = process.env.NODE_ENV === 'development' ?  \"http://localhost:8080/\":\"\"; //Check if dev\n\nconst states = {LOADING:\"LOAD\", DONE:\"DONE\", FAILED:\"FAILED\"}\n\n\nexport default class InstitutionsStore{\nstate = states.DONE;\n\n    vuggestuer = [];\n\n\n\n    constructor() {\n        //Loading data when it when the store is initialized.\n        this.fetchItem();\n    }\n\n\n//The fetchcall\n    fetchItem (){\n        const token = TokenStore.token;\n        //{headers:{\"authorization\":localStorage.getItem((\"jwt-token\"))}}\n        //todo: the fetch statment is parsing the header in a wrong way.\n        this.state = states.LOADING;\n        console.log(\"the header passed from store:\"+{headers:{Authorization: localStorage.getItem((\"portal-jwt-Token\"))}});\n        fetch(baseUrl + \"rest/institution/all\",{\n            headers:{\n                \"Authorization\": localStorage.getItem((\"portal-jwt-Token\"))\n            }\n        }).then((response)=> {\n                console.log(response);\n                response.json().then((json)=> {\n                    this.test = json;\n                    console.log(this.test)\n                    this.vuggestuer = json;\n                    this.state = states.DONE;\n                })\n            })\n            .catch((error)=>{\n                console.log(error)\n                this.state = states.FAILED;\n            });\n    }\n\n\n\n}\n\n\n\n\n\n\n\ndecorate(InstitutionsStore,{\n    vuggestuer:observable,\n\n});\n\nexport const institution = new InstitutionsStore();","import React from 'react'\nimport {institution} from '../../stores/InstitutionsStore'\n\n\n//Adding itmes to the list.\nconst List = ({ list }) => (\n    <ul>\n        {list.map((item,key) => (\n            <ListItem key={key} item={item} />\n        ))}\n    </ul>\n);\n\n//Designing the table\nconst ListItem = ({ item }) => (\n   <div>\n    <td>\n    <tr>\n        <div>{item.navn}</div>\n    </tr>\n   </td>\n\n\n       <td>\n           <tr>\n               <div>\n                   {\n                   (typeof(item.indstsers)==\"object\"?\n                       <div>\n                           {\n                               item.tilsynsPath.map((indsats,j)=>(\n                                   <div>\n\n                                           <a href={item.link[j]}>{item.tilsynsPath[j]}</a>\n\n\n                                       )}\n\n\n                                   </div>\n                               ))\n\n                           }\n\n                       </div>\n                           :\n                       null)\n                   }\n\n               </div>\n           </tr>\n       </td>\n\n\n\n       <td>\n           <tr>\n               <div> venteliste {item.venteliste}</div>\n           </tr>\n       </td>\n   </div>\n\n\n);\n\n\n\n\n\n\nclass InstitutionView extends React.Component {\n    constructor(props) {\n        super(props);\n            this.state= {\n                user: '',\n                loading: ''\n            }\n    console.log(props.location.state)\n\n    }\n\n\n\n\n\n\n    render() {\n        //debugger\n        return(\n        <div>\n\n            <ul>\n                <p>{institution.state}</p>\n                <List list={institution.vuggestuer}/>\n                <br/>\n            </ul>\n        </div>\n        )\n    }\n}\n\nexport default InstitutionView","import React from 'react';\nimport {Link} from \"react-router-dom\";\nimport Button from \"react-bootstrap/Button\";\n\nfunction LandingPage(){\n\n    return(\n        <div>\n            <h1>This is the landingPage</h1>\n\n            <Link to ={{//Linking to search results\n                pathname: \"/search\",\n\n            }} >\n                <Button> Se Tilsyn </Button>\n            </Link>\n\n        </div>\n\n\n    )\n\n\n\n}\n\nexport default LandingPage","import React from 'react'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\n\n\nclass NavBar extends React.Component {\n\n\n    render(){\n        return (\n        <div>\n            <Navbar bg=\"light\" expand=\"lg\" >\n                <Navbar.Brand href={\"#/\"}>Tilsyn.dk</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link href=\"#home\">Home</Nav.Link>\n                        <Nav.Link href=\"https://www.kk.dk/indhold/s%C3%B8g-og-skriv-dit-barn-op-til-vuggestue-og-dagpleje\">Opskrivning til vuggestue</Nav.Link>\n\n                        <Nav.Link href=\"#login\">Log Ind</Nav.Link>\n                        <Nav.Link href=\"#register\">Registrer dig</Nav.Link>\n\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        </div>\n\n\n\n        )\n\n    }\n\n\n\n}\n\nexport default NavBar","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport {observer} from \"mobx-react\";\nimport LogIn from \"./comtainer/Costumer/LogIn\";\nimport Register from \"./comtainer/Costumer/Register\"\nimport {HashRouter as Router, Route} from \"react-router-dom\";\nimport SearchInstitution from \"./comtainer/Costumer/SearchInstitution\"\n\nimport {Switch} from \"react-router-dom\"\nimport Container from \"react-bootstrap/Container\";\nimport institutionView from \"./comtainer/Costumer/InstitutionView\"\nimport LandingPage from \"./comtainer/LandingPage\"\nimport Navbar from \"./comtainer/Utility/NavBar\";\n\n\n\n\nclass App extends React.Component{\n\n\nrender()\n    {\n        return (\n\n\n\n\n            <Container>\n                <Navbar/>\n\n\n\n\n\n                <Router>\n                    <Switch>\n                        <Route exact path={\"/\"} component={LandingPage}/>\n                        <Route path={\"/register\"} component={Register}/>\n                        <Route path={\"/login\"} component={LogIn}/>\n                        <Route path={\"/search\"} component={SearchInstitution}/>\n                        <Route path={\"/searchResults\"} component={institutionView}/>\n                    </Switch>\n                </Router>\n            </Container>\n        )\n    }\n\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nconst token = getParameterByName(\"token\");\nif (token!=null && token.length>0){\n    //Store token and redirect to baseURL\n    localStorage.setItem(\"portal-jwt-Token\",token);\n    console.log(\"portal-jwt-Token from local storage: \"+localStorage.getItem(\"portal-jwt-Token\"));\n    window.location.replace(\"/\");\n    //todo: make sure this not null\n}\nconsole.log(\"token: \"+token);\n\n\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nfunction getParameterByName(name, url) {\n    if (!url) url = window.location.href;\n    //name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n    var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n        results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n}"],"sourceRoot":""}