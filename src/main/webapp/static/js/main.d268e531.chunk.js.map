{
  "version": 3,
  "sources": [
    "stores/TokenStore.js",
    "comtainer/Costumer/LogIn.js",
    "comtainer/Costumer/Register.js",
    "comtainer/Costumer/SearchInstitution.js",
    "comtainer/LandingPage.js",
    "stores/InstitutionsStore.js",
    "comtainer/Costumer/InstitutionView.js",
    "App.js",
    "serviceWorker.js",
    "index.js"
  ],
  "names": [
    "Loginstates",
    "LOGGING_IN",
    "LOGGEDOUT",
    "LOGGED_IN",
    "TokenStore",
    "state",
    "token",
    "logindata",
    "username",
    "password",
    "this",
    "localStorage",
    "getItem",
    "fetch",
    "method",
    "body",
    "JSON",
    "stringify",
    "headers",
    "then",
    "response",
    "text",
    "console",
    "log",
    "setItem",
    "catch",
    "decorate",
    "observable",
    "tokenStore",
    "LogIn",
    "props",
    "handleUsernameChange",
    "event",
    "setState",
    "target",
    "value",
    "handlePasswordChange",
    "onSubmit",
    "evt",
    "name",
    "doLogin",
    "preventDefault",
    "placeholder",
    "onChange",
    "type",
    "React",
    "Component",
    "Register",
    "user",
    "email",
    "userError",
    "brugere",
    "onInputChange",
    "field",
    "fieldError",
    "validate",
    "Object",
    "keys",
    "length",
    "concat",
    "errors",
    "style",
    "color",
    "SearchInstitution",
    "adresses",
    "fiels",
    "searchError",
    "fields",
    "adress",
    "zipcode",
    "to",
    "pathname",
    "LandingPage",
    "states",
    "LOADING",
    "DONE",
    "FAILED",
    "InstitutionsStore",
    "vuggestuer",
    "fetchItem",
    "json",
    "test",
    "error",
    "status",
    "institution",
    "List",
    "list",
    "map",
    "item",
    "key",
    "ListItem",
    "Navn",
    "Adresse",
    "href",
    "Link",
    "InstitutionView",
    "loading",
    "location",
    "App",
    "Container",
    "exact",
    "path",
    "component",
    "institutionView",
    "observer",
    "Boolean",
    "window",
    "hostname",
    "match",
    "ReactDOM",
    "render",
    "document",
    "getElementById",
    "navigator",
    "serviceWorker",
    "ready",
    "registration",
    "unregister"
  ],
  "mappings": "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",
  "file": "static/js/main.d268e531.chunk.js",
  "sourcesContent": [
    "import {decorate, observable} from \"mobx\";\r\nconst baseUrl = process.env.NODE_ENV === 'development' ?  \"http://localhost:8080/\":\"\"; //Check if dev\r\n\r\n\r\n\r\nconst Loginstates = {LOGGING_IN:\"Loading\", LOGGEDOUT:\"Logout\", LOGGED_IN:\"LoggedIn\"};\r\n\r\nexport class TokenStore {\r\n    state = Loginstates.LOGGEDOUT;\r\n    token = null;\r\n    logindata = {username:\"\",password:\"\"};\r\n\r\n    constructor() {\r\n        this.token = localStorage.getItem(\"girafToken\")\r\n        //Validate if token is still good and keep/discard token and set state\r\n    }\r\n\r\n    doLogin() {\r\n        this.state=Loginstates.LOGGING_IN;\r\n        fetch(baseUrl + \"rest/login\",{\r\n            method:\"POST\",\r\n            body:JSON.stringify(this.logindata),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(\r\n            (response)=> {\r\n                response.text().then(\r\n                    (token)=> {\r\n                        console.log(\"Got Token: \" + token);\r\n                        this.token=token;\r\n                        localStorage.setItem(\"girafToken\",token);\r\n                        this.state=Loginstates.LOGGED_IN;}\r\n\r\n                )}\r\n        ).catch(()=>this.state = Loginstates.LOGGEDOUT )\r\n    }\r\n}\r\n\r\n\r\ndecorate(TokenStore,{\r\n    state: observable,\r\n    token: observable,\r\n    logindata:observable\r\n\r\n});\r\n\r\nexport const tokenStore = new TokenStore();",
    "import React from 'react';\r\nimport {TokenStore} from \"../../stores/TokenStore\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nconst tokenStore = new TokenStore();\r\n\r\n\r\n\r\n\r\nexport class LogIn extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username:'',\r\n            password:''};\r\n    }\r\n\r\n    handleUsernameChange = (event) => {\r\n        this.setState({username:event.target.value});\r\n        console.log('Handle change' +this.state.username);\r\n    };\r\n\r\n    handlePasswordChange = (event) => {\r\n        this.setState({password:event.target.value});\r\n        console.log('Handle change' +this.state.password);\r\n    };\r\n\r\n\r\n    onSubmit=(evt)=>{\r\n        const name =this.state.username;\r\n        const password = this.state.password;\r\n        this.setState({username:name})\r\n        this.setState({password:password})\r\n        tokenStore.logindata.username=this.state.username;\r\n        tokenStore.logindata.password=this.state.password;\r\n        tokenStore.doLogin();\r\n        evt.preventDefault();\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n          <div>\r\n              <h1>Login</h1>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <input\r\n                        placeholder=\"Username\"\r\n                        value={this.state.username}\r\n                        onChange={this.handleUsernameChange}\r\n                    />\r\n                    <input\r\n                        placeholder=\"password\"\r\n                        value={this.state.password}\r\n                        onChange={this.handlePasswordChange}\r\n                    />\r\n                    <input type=\"submit\"/>\r\n                </form>\r\n\r\n          </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default LogIn",
    "import React from 'react'\r\n\r\n\r\nclass Register extends React.Component {\r\n\r\n    state = {\r\n        user: {\r\n            name: '',\r\n            email: '',\r\n            username: ''\r\n        },\r\n        userError: {},\r\n        brugere:[],\r\n    };\r\n\r\n\r\n\r\n    onInputChange = (event) => {\r\n\r\n        const field = this.state.user;\r\n        field[event.target.name] = event.target.value;\r\n        this.setState({user: field});\r\n        console.log('Handle change' +event.target.name);\r\n    };\r\n\r\n\r\n    onSubmit=(evt)=>{\r\n        const brugere = [...this.state.brugere];\r\n       const field = this.state.user;\r\n       const fieldError = this.validate(field);\r\n       this.setState({userError:fieldError});\r\n        evt.preventDefault();\r\n\r\n        if(Object.keys(fieldError).length) return;\r\n\r\n\r\n       this.setState({\r\n           brugere:brugere.concat(field),\r\n           user :{\r\n               name:field.name,\r\n               email:field.email,\r\n               username:field.username\r\n           }\r\n       });\r\n\r\n\r\n        console.log(this.state.user)\r\n\r\n    }\r\n\r\n    validate=(user)=>{\r\n        const errors={};\r\n        if(!user.name) errors.name = \"Username required\";\r\n        if(!user.email) errors.email =\"Email required\";\r\n        if(!user.username) errors.username =\"Username required\";\r\n        return errors;\r\n\r\n    };\r\n\r\n\r\n\r\n    render(){\r\n        return(\r\n\r\n            <div>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <input\r\n                        name=\"username\"\r\n                        placeholder=\"username\"\r\n                        value={this.state.user.username}\r\n                        onChange={this.onInputChange}\r\n                    />\r\n\r\n                    <span style={{color:'red'}}>{this.state.userError.username}</span>\r\n                    <br/>\r\n\r\n                    <input\r\n                        name=\"email\"\r\n                        placeholder=\"email\"\r\n                        type='email'\r\n                        value={this.state.user.email}\r\n                        onChange={this.onInputChange}\r\n                    />\r\n\r\n                    <span style={{color:'red'}}>{this.state.userError.email}</span>\r\n                    <br/>\r\n\r\n                    <input\r\n                        placeholder=\"name\"\r\n                        name=\"name\"\r\n                        type='text'\r\n                        value={this.state.user.name}\r\n                        onChange={this.onInputChange}\r\n                    />\r\n                    <span style={{color:'red'}}>{this.state.userError.name}</span>\r\n                    <br/>\r\n                    <input type=\"submit\"/>\r\n                </form>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Register\r\n",
    "import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport {Link} from \"react-router-dom\"\r\n\r\nclass SearchInstitution extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            fiels : {\r\n                adress:'',\r\n                zipcode:''},\r\n\r\n            searchError: {},\r\n            adresses:[],\r\n        };\r\n    }\r\n\r\n    onSubmit=(evt)=>{\r\n        const adresses = [...this.state.adresses];\r\n        const field = this.state.fiels\r\n        const fieldError = this.validate(field);\r\n        this.setState({searchError:fieldError});\r\n        evt.preventDefault();\r\n\r\n        if(Object.keys(fieldError).length) return;\r\n\r\n\r\n        this.setState({\r\n            fields:adresses.concat(field),\r\n            fiels :{\r\n                adress:field.adress,\r\n                zipcode:field.zipcode,\r\n\r\n            }\r\n        });\r\n  console.log(this.state.fiels)\r\n\r\n    }\r\n\r\n    validate=(fiels)=>{\r\n        const errors={};\r\n        if(!fiels.adress) errors.adress = \"Adress required\";\r\n        if(!fiels.zipcode) errors.zipcode =\"Zipcode required\";\r\n\r\n        return errors;\r\n\r\n    };\r\n\r\n    onInputChange = (event) => {\r\n\r\n        const field = this.state.fiels;\r\n        field[event.target.name] = event.target.value;\r\n        this.setState({user: field});\r\n        console.log('Handle change' +event.target.name);\r\n        console.log('Handle change' +this.state.fiels.adress);\r\n        console.log('Handle change' +this.state.fiels.zipcode);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <input\r\n                        name=\"adress\"\r\n                        placeholder=\"Adresse\"\r\n                        value={this.state.adress}\r\n                        onChange={this.onInputChange}\r\n                    />\r\n                    <span style={{color:'red'}}>{this.state.searchError.adress}</span>\r\n                    <br/>\r\n                    <input\r\n                        name=\"zipcode\"\r\n                        placeholder=\"post nr\"\r\n                        value={this.state.zipcode}\r\n                        onChange={this.onInputChange}\r\n                    />\r\n                    <span style={{color:'red'}}>{this.state.searchError.zipcode}</span>\r\n                    <br/>\r\n\r\n\r\n                    <Link to ={{\r\n                        pathname: \"/searchResults\",\r\n                        state:{\r\n                            name: \"Hello\"\r\n                        }\r\n\r\n                    }} >\r\n                        <input type=\"submit\"/>\r\n                    </Link>\r\n\r\n\r\n                </form>\r\n\r\n            </div>\r\n            )\r\n        }\r\n    }\r\n\r\n\r\nexport default SearchInstitution",
    "import React from 'react'\r\n\r\nclass LandingPage extends React.Component{\r\n    render(){\r\n        return (\r\n            <div>Welcome to da landing page man.</div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default LandingPage;",
    "\r\nimport {decorate, observable} from \"mobx\";\r\nconst baseUrl = process.env.NODE_ENV === 'development' ?  \"http://localhost:8080/\":\"\"; //Check if dev\r\n\r\nconst states = {LOADING:\"LOAD\", DONE:\"DONE\", FAILED:\"FAILED\"}\r\n\r\n\r\nexport default class InstitutionsStore{\r\nstate = states.DONE;\r\n\r\n    vuggestuer = [];\r\n\r\n\r\n\r\n    constructor() {\r\n        //Loading data when it when the store is initialized.\r\n        this.fetchItem();\r\n    }\r\n\r\n//Todo: find out why this is called only when npm restarts\r\n//The fetchcall\r\n    fetchItem (){\r\n\r\n        this.state = states.LOADING;\r\n        fetch(baseUrl + \"rest/mongo/getKGardenQuery\")\r\n        .then((response)=> {\r\n            console.log(response);\r\n            response.json().then((json)=> {\r\n\r\n                console.log(this.test)\r\n                this.vuggestuer = json;\r\n                this.state = states.DONE;\r\n            })\r\n        })\r\n        .catch((error)=>{\r\n            console.log(error.status)\r\n            this.state = states.FAILED;\r\n            //this.vuggestuer = [\"loading failed, kindergarden not found :C. The servers is likely down.\"]\r\n        });\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ndecorate(InstitutionsStore,{\r\n    vuggestuer:observable,\r\n\r\n});\r\n\r\nexport const institution = new InstitutionsStore();",
    "import React from 'react'\r\nimport {institution} from '../../stores/InstitutionsStore'\r\n\r\n\r\n//Adding itmes to the list.\r\nconst List = ({ list }) => (\r\n    <ul>\r\n        {list.map((item,key) => (\r\n            <ListItem key={key} item={item} />\r\n        ))}\r\n    </ul>\r\n);\r\n\r\n//Designing the table\r\nconst ListItem = ({ item }) => (\r\n   <div>\r\n    <td>\r\n    <tr>\r\n        <div>{item.Navn}</div>\r\n    </tr>\r\n   </td>\r\n       <td>\r\n           <tr>\r\n               <div>{item.Adresse}</div>\r\n           </tr>\r\n       </td>\r\n       <td>\r\n           <tr>\r\n               <div><a href={item.Link}>{item.Link}</a></div>\r\n\r\n           </tr>\r\n       </td>\r\n   </div>\r\n\r\n\r\n);\r\n\r\n\r\nclass InstitutionView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n            this.state= {\r\n                user: '',\r\n                loading: ''\r\n            }\r\n    console.log(props.location.state)\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        //debugger\r\n        return(\r\n        <div>\r\n\r\n            <ul>\r\n                <p>{institution.state}</p>\r\n                <List list={institution.vuggestuer}/>\r\n                <br/>\r\n            </ul>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InstitutionView",
    "import React from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nimport {observer} from \"mobx-react\";\r\nimport LogIn from \"./comtainer/Costumer/LogIn\";\r\nimport Register from \"./comtainer/Costumer/Register\"\r\nimport {HashRouter as Router,Route} from \"react-router-dom\";\r\nimport SearchInstitution from \"./comtainer/Costumer/SearchInstitution\"\r\n\r\nimport {Switch} from \"react-router-dom\"\r\nimport Container from \"react-bootstrap/Container\";\r\nimport LandingPage from \"./comtainer/LandingPage\";\r\nimport institutionView from \"./comtainer/Costumer/InstitutionView\"\r\n\r\n\r\n\r\nclass App extends React.Component{\r\n\r\nrender()\r\n    {\r\n        return (\r\n\r\n\r\n\r\n\r\n            <Container>\r\n                <Router>\r\n                    <Switch>\r\n                        <Route exact path={\"/\"} component={LandingPage}/>\r\n                        <Route path={\"/register\"} component={Register}/>\r\n                        <Route path={\"/login\"} component={LogIn}/>\r\n                        <Route path={\"/search\"} component={SearchInstitution}/>\r\n                        <Route path={\"/searchResults\"} component={institutionView}/>\r\n                    </Switch>\r\n                </Router>\r\n            </Container>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default observer(App);\r\n",
    "// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n",
    "import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"
  ],
  "sourceRoot": ""
}